第二章   装配Bean  第二部分

知识点4:依赖注入

 * 手工装配
       * 使用xml配置文件
               *  使用属性setter方法注入            4.1
               *  使用构造器注入                    4.2
       * 使用注解
              * autowired注解                      4.3
              * resource注解                       4.4
 * 自动装配                                         4.5
       * byType：按类型装配
       * byName：按名称装配
       * constructor装配，
       * autodetect 不确定装配。
注入依赖对象可以采用手工装配或自动装配，在实际应用中建议使用手工装配，因为自动装配会产生未知情况,开发人员无法预见最终的装配结果。


------------------------------------------------------------------


4.1:手工装配 --使用xml配置文件--使用属性setter方法注入
    通过setter方法注入依赖
        <bean>元素的<property>子元素指明了使用它们的set方法来注入。
        可以注入任何东西，从基本类型到集合类，甚至是应用系统的bean。

         通过setter方法注入依赖 —— 基本数据类型和String
         *   简单bean配置，配置bean的简单属性，基本数据类型和String。
        <bean id="personService"   class="javacore.spring.bean.impl.PersonServiceImpl">
                 <!-- 基本类型,string类型 -->
                 <property name="age" value="20"></property>
                 <property name="name" value="张无忌"></property>
        </bean>


         通过setter方法注入依赖 —— 引用其它bean
         <bean id="person" class="javacore.spring.bean.Person" />
         <bean id="personService" class="javacore.spring.bean.impl.PersonServiceImpl">
                <!-- 引用类型 -->
                <property name="person" ref="person" />
         </bean>


         通过setter方法注入依赖 —— 内部bean
         <bean id="personService" class="javacore.spring.bean.impl.PersonServiceImpl">
                 <!-- 内部bean注入 -->
                 <property name="personClass">
                      <bean class="javacore.spring.bean.PersonClass" />
                 </property>
         </bean>
         这种方式的缺点是，无法在其它地方重用这个personClass实例，原因是它是专门为personService而用。


         通过setter方法注入依赖 —— 装配集合
          若bean的属性是集合类型，按如下处理：
            A、装配List和数组:
                <!-- 装配list -->
                <property name="lists">
                    <list>
                        <value>list1</value>
                        <value>list2</value>
                        <ref bean="person"/>
                     </list>
                </property>

                 <!-- 装配数组 -->
                 <property name="obj">
                   <list>
                        <value>obj1</value>
                        <value>obj2</value>
                        <ref bean="person"/>
                   </list>
                 </property>


        通过setter方法注入依赖 —— 装配集合
          B、 装配set：
                   <!-- 装配set -->
                   <property name="sets">
                     <set>
                          <value>set1</value>
                          <value>set2</value>
                          <ref bean="person"/>
                     </set>
                   </property>
        set使用方法和list一样，不同的是对象被装配到set中，而list是装配到List或数组中装配。


        通过setter方法注入依赖 —— 装配集合
         C、 装配map：
             <!-- 装配map-->
             <property name="maps">
                      <map>
                           <entry key="01">
                                <value>map01</value>
                           </entry>
                           <entry key="02">
                                <value>map02</value>
                           </entry>
                      </map>
             </property>
         map中的<entry>的数值和<list>以及<set>的一样，可以使任何有效的属性元素，需要注意的是key值必须是String的。


        通过setter方法注入依赖 —— 装配集合
         D、装配Properties：
            <!--装配Properties  -->
            <property name="props">
               <props>
                 <prop key="01">prop1</prop>
                 <prop key="02">prop2</prop>
               </props>
            </property>


        通过setter方法注入依赖 —— 装配集合
         E、设置null：
              <!-- 装配null -->
              <property name="listnull">
                   <null/>
              </property>

------------------------------------------------------------------

4.2:手工装配 --使用xml配置文件--通过构造函数注入
    通过构造函数注入依赖 —— 通过参数的顺序：
        <constructor-arg index="0">
              <value>张三</value>
        </constructor-arg>
        <constructor-arg index="1">
               <value>56</value>
         </constructor-arg>

    通过构造函数注入依赖 —— 通过参数的类型：
        <!-- 通过参数的类型 -->
        <constructor-arg type="java.lang.Integer">
              <value>56</value>
        </constructor-arg>
        <constructor-arg type="java.lang.String">
              <value>张三</value>
        </constructor-arg>


------------------------------------------------------------------


4.3:手工装配 --使用注解方式
    在java代码中使用@Autowired或@Resource注解方式进行装配的前提条件是

    1、引入context命名空间  需要在xml配置文件中配置以下信息：
       <beans xmlns="http://www.springframework.org/schema/beans"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns:context="http://www.springframework.org/schema/context"
           xsi:schemaLocation="http://www.springframework.org/schema/beans
               http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
               http://www.springframework.org/schema/context
               http://www.springframework.org/schema/context/spring-context-3.0.xsd">
           <context:annotation-config/>
       </beans>

  2、在配置文件中添加context:annotation-config标签
      <context:annotation-config/>这个配置隐式注册了多个对注释进行解析处理的处理器
        AutowiredAnnotationBeanPostProcessor，
        CommonAnnotationBeanPostProcessor，
        PersistenceAnnotationBeanPostProcessor，
        RequiredAnnotationBeanPostProcessor
      注： @Resource注解在spring安装目录的
      spring-framework-3.0.2.RELEASE-dependencies\javax.annotation\com.springsource.javax.annotation\1.0.0包下
      com.springsource.javax.annotation-1.0.0.jar

  . 注意：
        *  如果使用jdk1.5，需要引入com.springsource.javax.annotation-1.0.0.jar包
        *  如果使用jdk1.6，不需要引入com.springsource.javax.annotation-1.0.0.jar包

       com.springsource.javax.annotation-1.0.0.jar
       该jar包在spring-framework-3.0.2.RELEASE-dependencies\javax.annotation\com.springsource.javax.annotation\1.0.0包下


4.3:手工装配 --使用注解方式-autowired注解
 Autowired标注在字段上
     *  @Autowired注解默认按类型进行装配
     *  获取该注解标注的字段的类型---PersonDao类型
              *  以该类型为条件到spring容器(beans.xml)中去查找bean的id节点的类型是PersonDao类型.
              *  找到以后,获取该节点对应的对象,利用反射直接为personDao变量赋值

     *  @Qualifier(“personDao”)该注解以名字为条件查找依赖对象
              *  以该注解的的参数personDao条件到spring容器(beans.xml)中去查找bean的id节点的值是personDao的对象
              *  找到以后,获取该节点对应的对象, 利用反射直接为personDao变量赋值，如果不存在该名称,抛出异常

      @Autowired
      private PersonDao  personDao;//用于字段上

      @Autowired   @Qualifier("personDao")
      private PersonDao  personDao;//用于字段上


 Autowired标注在setter方法上
     @Autowired注解默认按类型进行装配
           *  获取 setPersonDao()方法的参数的类型---PersonDao类型
           *  以该类型为条件到spring容器(beans.xml)中去查找bean的id节点的类型是PersonDao类型.
	 * 找到以后,获取该节点对应的对象, 把该对象作为实参传递给该setPersonDao(PersonDao personDao)的形参.
           * @Qualifier("personDao")该注解以名字为条件查找依赖对象
	 *  以该注解的的参数personDao条件到spring容器(beans.xml)中去查找bean的id节点的值是PersonDao的对象
	 *  找到以后,获取该节点对应的对象, 把该对象作为实参传递给该setPersonDao(PersonDao personDao)的形参.
	 * 如果不存在该名称,抛出异常

     @Autowired
     public void setPersonDao(PersonDao personDao) {  //用于属性的set方法上
         this.personDao = personDao;
     }
     @Autowired
     public void setPersonDao(@Qualifier("personDao")
                             PersonDao personDao) {  //用于属性的set方法上
              this.personDao = personDao;
     }


4.4:手工装配 --使用注解方式-resource注解
Resource注解标注在字段上
     * @Resource注解默认按名称装配。
     * 如果没有指定name属性
            *  获取该注解标注的字段值---personDao
             *  以该字段值为条件到spring容器(beans.xml)中去查找bean的id节点的值是 personDao的节点
                 * 找到以后,获取该节点对应的对象, 利用反射直接为personDao变量赋值
                 * 如果没有找到.并且按照默认的名称找不到依赖对象时, @Resource注解会回退到按类型装配
                     * 获取该注解标注的字段类型--PersonDao
                     * 以该类型为条件到spring容器(beans.xml)中去查找bean的节点的类型是PersonDao类型的对象
                     * 找到以后,获取该节点对应的对象,  利用反射直接为personDao变量赋值
     * 如果指定name属性  只能按名称装配
	        *  获取name属性的值 personDao
	        *  以该值为条件到spring容器(beans.xml)中去查找bean的id节点的值是PersonDao的对象
	        * 找到以后,获取该节点对应的对象, 利用反射直接为personDao变量赋值
	        * 如果不存在该名称,抛出异常

     @Resource(name="personDao");
     private PersonDao personDao;//用于字段上


Resource注解标注在setter方法上
     *  @Resource注解默认按名称装配。
     *  如果没有指定name属性
          *  获取setPersonDao()方法的属性名---personDao
	 *  以该属性名为条件到spring容器(beans.xml)中去查找bean的id节点的值是personDao的节点
	 *  找到以后,获取该节点对应的对象, 把该对象作为实参传递给该setPersonDao(PersonDao personDao)的形参.
	 *  如果没有找到.并且按照默认的名称找不到依赖对象时，@Resource注解会回退到按类型装配
	       *  获取setPersonDao()方法的参数类型---PersonDao
	       *  以该类型为条件到spring容器(beans.xml)中去查找bean的节点的类型是PersonDao类型对象
	         *  找到以后,获取该节点对应的对象, 把该对象作为实参传递给该setPersonDao(
	             PersonDao personDao)方法的形参
     *  如果指定name属性  只能按名称装配
	 *  获取name属性的值
	 *  以该值为条件到spring容器(beans.xml)中去查找bean的id节点的值是PersonDao的对象
	 *  找到以后,获取该节点对应的对象, 把该对象作为实参传递给该setPersonDao(PersonDao personDao)的形参.
	 *  如果不存在该名称,抛出异常

    @Resource(name="personDao")
    public void setPersonDao(PersonDao personDao){
           this.personDao = personDao;
    }


------------------------------------------------------------------

4.5:自动装配

对于自动装配，大家了解一下就可以了，实在不推荐大家使用。例子：
<bean id=“foo” class=“...Foo”  autowire=“autowire type”>
autowire属性取值如下
* byType：按类型装配，可以根据属性的类型，在容器中寻找跟该类型匹配的bean。如果发现多个，那么将会抛出异常。如果没有找到，即属性值为null。
* byName：按名称装配，可以根据属性的名称，在容器中寻找跟该属性名相同的bean，如果没有找到，即属性值为null。
* constructor与byType的方式类似，不同之处在于它应用于构造器参数。如果在容器中没有找到与构造器参数类型一致的bean，那么将会抛出异常。
* autodetect :首先尝试使用constructor来自动装配，然后使用byType方式。不确定性的处理与constructor方式和byType方式一致。


------------------------------------------------------------------

知识点5:指定Bean的初始化方法和销毁方法(注解)

Spring初始化bean或销毁bean时，有时需要作一些处理工作，因此spring可以在创建和拆卸bean的时候调用bean的两个生命周期方法。
  <bean id=“foo” class=“...Foo” init-method=“setup” destory-method=“teardown”/>

当bean被载入到容器的时候调用setup
初始化注解方式下: @PostConstruct

当bean从容器中删除的时候调用teardown(scope= singleton有效)
销毁注解方式如下: @PreDestroy






