<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--<mapper namespace="org.mybatis.book.chapter2.mapper.RoleMapper"> --> <!-- 命名空间不可少 -->
    <!-- 可以使用typeAlias定义别名，简化resultType-->
    <!--<select id="selectRole" parameterType="int" resultType="org.mybatis.book.chapter2.po.Role">-->
        <!--select id, role_name as roleName, note from t_role where id = #{id}-->
    <!--</select>-->
<!--</mapper>-->


<!--
    namespace命名空间，作用就是对sql进行分类化管理，理解为sql隔离
    注意：使用mapper代理方法开发，namespace有特殊的作用，
-->
<mapper namespace="test">
    <!-- 在User.xml映射文件中配置很多sql语句-->
    <!-- 需求： 通过id查询用户表的记录 -->
    <!-- 通过select执行数据库查询
         id：表示映射文件中的sql语句，
             将sql语句封装到mappedStatement对象中，所以将id称为statement的id

         parameterType：指定输入参数的类型，这里指定int型

         #{}，表示一个占位符号
         #{id}，其中id表示接收输入的参数，参数名称是id，
                如果输入参数是简单类型，#{}中的参数名可以任意，可以是value或者其它
     -->

    <!-- 可以使用typeAlias定义别名，简化resultType-->
    <select id="findUserById" parameterType="int" resultType="org.alpha.mybatis.part01.po.User">
        <!--select id, role_name as roleName, note from t_role where id = #{id}-->
        select * from user where id = #{id}
    </select>


    <!--
        根据用户的名称模糊查询用户，可能返回多条
        resultType:
            返回多条记录，一条记录所对应的Java对象类型为resultType

        ${}:
            表示拼接sql语句，将接收到参数的内容不加任何修饰拼接在sql中
            ${}拼接sql，可能引起sql注入

        ${value}:
            接收输入参数的内容，如果传入类型是简单类型，${}中只能使用value
    -->
    <select id="findUserByName" parameterType="java.lang.String"
            resultType="org.alpha.mybatis.part01.po.User">
        select * from user where username like '%${value}%'
    </select>


    <!--
        添加用户
        parameterType：指定输入参数类型是POJO
        #{}中指定POJO的属性名，接收到POJO对象的属性值，
            mybatis通过OGNL获取对象的属性值
    -->
    <insert id="insertUser" parameterType="org.alpha.mybatis.part01.po.User">
        insert into user(username, birthday, gender, address)
        values(#{username}, #{birthday}, #{gender}, #{address})
    </insert>


    <!--
        添加User对象到数据库，并返回自增主键id

        parameterType，执行输入参数类型是POJO
        #{}中指定POJO的属性名，接收到POJO对象的属性值，
            mybatis通过OGNL获取对象的属性值
    -->
    <insert id="insertUserAndReturnId" parameterType="org.alpha.mybatis.part01.po.User">
        <!--
            将插入数据的自增主键返回，返回到user对象user.id中

            select last_insert_id()
            得到刚insert操作插入记录的自增主键

            keyProperty: 将查询到主键值设置到parameterType指定的对象的那个属性，也即是user.id
            order: select last_insert_id()的执行顺序，相对于insert语句来说它的执行顺序
            resultType：执行select last_insert_id()的结果类型
        -->
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            select last_insert_id()
        </selectKey>

        insert into user(username, birthday, gender, address)
        values(#{username}, #{birthday}, #{gender}, #{address})
    </insert>



    <!--
        添加用户到数据库，返回uuid到userWithUuid.id
    -->
    <insert id="insertUserAndReturnUuid" parameterType="org.alpha.mybatis.part01.po.UserWithUuid">
        <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.String">
            select uuid()
        </selectKey>
        insert into user_with_uuid(id, username, birthday, gender, address)
        values(#{id}, #{username}, #{birthday}, #{gender}, #{address})
    </insert>


    <!--
        删除用户
        根据id删除用户，需要传入id值
    -->
    <delete id="deleteUser" parameterType="java.lang.Integer">
        delete from user where id = #{id}
    </delete>


    <!--
        根据id更新用户
        分析：
            需要传入用户的id
            需要传入更新之后的用户信息
        parameterType：指定user对象，包括id和更新信息，注意，id必须存在
        ${id}：从输入user对象中获取id属性值
    -->
    <update id="updateUser" parameterType="org.alpha.mybatis.part01.po.User">
        update user set username=#{username}, birthday=#{birthday},
            gender=#{gender}, address=#{address} where id=#{id}
    </update>

</mapper>