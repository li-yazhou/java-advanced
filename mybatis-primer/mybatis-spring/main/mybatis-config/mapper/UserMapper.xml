<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--<mapper namespace="org.mybatis.book.chapter2.mapper.RoleMapper"> --> <!-- 命名空间不可少 -->
<!-- 可以使用typeAlias定义别名，简化resultType-->
<!--<select id="selectRole" parameterType="int" resultType="org.mybatis.book.chapter2.po.Role">-->
<!--select id, role_name as roleName, note from t_role where id = #{id}-->
<!--</select>-->
<!--</mapper>-->


<!--
    namespace命名空间，作用就是对sql进行分类化管理，理解为sql隔离
    注意：使用mapper代理方法开发，namespace有特殊的作用，

    关联Mapper.java接口和映射文件Mapper.xml
-->
<mapper namespace="org.alpha.mybatis.part01.mapper.UserMapper">
    <!-- 在User.xml映射文件中配置很多sql语句-->
    <!-- 需求： 通过id查询用户表的记录 -->
    <!-- 通过select执行数据库查询
         id：表示映射文件中的sql语句，
             将sql语句封装到mappedStatement对象中，所以将id称为statement的id

         parameterType：指定输入参数的类型，这里指定int型

         #{}，表示一个占位符号
         #{id}，其中id表示接收输入的参数，参数名称是id，
                如果输入参数是简单类型，#{}中的参数名可以任意，可以是value或者其它
     -->


    <!-- 可以使用typeAlias定义别名，简化resultType-->
    <select id="findUserById" parameterType="int" resultType="org.alpha.mybatis.part01.po.User">
        <!--select id, role_name as roleName, note from t_role where id = #{id}-->
        select * from user where id = #{id}
    </select>


    <!--
        UserQueryVo，查询包装类型
    -->
    <select id="findUserList" parameterType="org.alpha.mybatis.part01.po.UserQueryVo"
            resultType="org.alpha.mybatis.part01.po.UserCustom">
        select * from user where gender = #{userCustom.gender} and
            username like '%${userCustom.username}%'
    </select>


    <select id="findUserCount" parameterType="org.alpha.mybatis.part01.po.UserQueryVo"
            resultType="int">
        select count(*) from user where gender=#{userCustom.gender} and
            username like '%${userCustom.username}%'
    </select>


    <!--
        使用resultMap转换查询结果
            当类的属性名和对应表的列名不一致时，使用resultMap作为桥梁，
            将表中的查询结果转换为对应的类

        type, resultMap最终映射的Java对象类型，可以使用别名
        id, resultMap的唯一标识
    -->
    <resultMap type="org.alpha.mybatis.part01.po.User" id="userResultMap">
        <!--
            id, 表示查询结果集中唯一标识
            column, 查询结果的列名（或别名）
            property, type指定的POJO类型中的属性名
        -->
        <id column="id_" property="id" />
        <result column="username_" property="username" />
    </resultMap>


    <!--
        使用resultMap作为statement的输出映射类型
        resultMap，指定定义的resultMap的id，
                   如果这个resultMap在其它的mapper文件，前面需要添加namespace
    -->
    <select id="findUserByIdResultMap" parameterType="int"
        resultMap="userResultMap">
        select id id_, username username_ from user where id=#{value}
    </select>


    <!--
        通过对查询结果起别名的方式，使查询结果的列名和POJO属性名一致，
        完成数据表到对象的映射
    -->
    <select id="findUserByIdWithAlias" parameterType="int"
            resultType="org.alpha.mybatis.part01.po.User">
        <!--select id as id, user_name as username from user where id=#{value}-->
        select id as id, username as username from user where id=#{value}
    </select>


    <!--
        使用动态SQL完成参数检查
        UserQueryVo，查询包装类型
    -->
    <select id="findUserListWithDynamicSql" parameterType="org.alpha.mybatis.part01.po.UserQueryVo"
            resultType="org.alpha.mybatis.part01.po.UserCustom">
        select * from user
        <where>
            <!--
                where 可以自动去掉条件中的第一个and
            -->
            <if test="userCustom!=null">
                <if test="userCustom.gender!=null and userCustom.gender!=''">
                    and gender=#{userCustom.gender}
                </if>
                <if test="userCustom.username!=null and userCustom.username!=''">
                    and username like '%${userCustom.username}%'
                </if>
            </if>
        </where>
    </select>


    <select id="findUserCountWithDynamicSql" parameterType="org.alpha.mybatis.part01.po.UserQueryVo"
            resultType="int">
        select count(*) from user
        <where>
            <if test="userCustom!=null">
                <if test="userCustom.gender!=null and userCustom.gender!=''">
                    and gender=#{userCustom.gender}
                </if>
                <if test="userCustom.username!=null and userCustom.username!=''">
                    and username like '%${userCustom.username}%'
                </if>
            </if>
        </where>
    </select>


    <!--
        定义SQL片段
            id：
                SQL片段的唯一标识
            经验：
                基于单表定义SQL片段，这样SQL判断的可重用性较高
                在SQL片段中不要包括where
    -->
    <sql id="query_user_where">
        <if test="userCustom!=null">
            <if test="userCustom.gender!=null and userCustom.gender!=''">
                and gender=#{userCustom.gender}
            </if>
            <if test="userCustom.username!=null and userCustom.username!=''">
                and username like '%${userCustom.username}%'
            </if>
        </if>
    </sql>


    <select id="findUserCountWithSqlCode" parameterType="org.alpha.mybatis.part01.po.UserQueryVo"
            resultType="int">
        select count(*) from user
        <where>
            <!--<if test="userCustom!=null">-->
                <!--<if test="userCustom.gender!=null and userCustom.gender!=''">-->
                    <!--and gender=#{userCustom.gender}-->
                <!--</if>-->
                <!--<if test="userCustom.username!=null and userCustom.username!=''">-->
                    <!--and username like '%${userCustom.username}%'-->
                <!--</if>-->
            <!--</if>-->
            <!-- 引用SQL片段的id，如果refid指定的id不在本mapper文件中，需要在前面加namespace-->
            <include refid="query_user_where" />
            <!-- 在此处可以引用其他的SQL引用 -->
        </where>
    </select>


    <!--
        使用mybatis的foreach遍历数组或者List类型的参数，然后拼接SQL
    -->
    <select id="findUserListWithForeach" parameterType="org.alpha.mybatis.part01.po.UserQueryVo"
        resultType="org.alpha.mybatis.part01.po.UserCustom">
        select * from user
        <where>
            <if test="userCustom!=null">

                <if test="userCustom.gender!=null and userCustom.gender!=''">
                    and gender=#{userCustom.gender}
                </if>

                <if test="userCustom.username!=null and userCustom.username!=''">
                    <!--DEBUG [main] - ==>  Preparing: select * from user WHERE gender=?
                            and username like '%l%'
                            and ( id=? or id=? or id=? )-->
                    <!--DEBUG [main] - ==> Parameters: 1(String), 1(Integer), 3(Integer), 5(Integer)-->
                    and username like '%${userCustom.username}%'
                </if>
            </if>

            <if test="ids!=null">
                <!-- and (id=1 or id=10 or id=16) -->
                <!--
                    使用foreach遍历传入ids
                    collection：
                        指定输入对象中集合属性
                    item：
                        集合中的元素
                    open：
                        开始遍历时拼接的串
                    close：
                        结束遍历时拼接的串
                    separator：
                        分隔符
                -->
                <foreach collection="ids"
                         item="user_id"
                         open="and ("
                         close=")"
                         separator="or">
                    id=#{user_id}
                </foreach>
            </if>
        </where>
    </select>
</mapper>

