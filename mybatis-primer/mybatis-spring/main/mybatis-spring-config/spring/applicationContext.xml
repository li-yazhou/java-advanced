<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context-4.1.xsd">
    <!-- 加载配置文件 -->
    <context:property-placeholder location="classpath:db.properties" />

    <!-- 数据源，使用dbcp -->
    <bean id="dataSource"
          class="org.apache.commons.dbcp2.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <!--<property name="maxActive" value="10" />-->
        <property name="maxIdle" value="5" />
    </bean>

    <!-- sqlSessionFactory -->
    <bean id="sqlSessionFactory"
          class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 加载mybatis的配置文件 -->
        <property name="configLocation" value="mybatis/SqlMapConfig.xml" />
        <!-- 数据源 -->
        <property name="dataSource" ref="dataSource" />
    </bean>

    <bean id="userDao" class="org.alpha.ssm.dao.UserDaoImpl">
        <property name="sqlSessionFactory" ref="sqlSessionFactory" />
    </bean>



    <!--
        Mapper配置
            MapperFactoryBean：
                根据mapper接口生成代理对象

    -->
    <!--<bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">-->
        <!--<property name="sqlSessionFactory" ref="sqlSessionFactory" />-->
         <!--mapperInterface指定的mapper接口-->
        <!--<property name="mapperInterface" value="org.alpha.ssm.mapper.UserMapper" />-->
    <!--</bean>-->

    <!--
       通过上面的MapperFactoryBean创建代理对象，需要对每个mapper都进行配置，繁琐
       使用自动扫描mapper的方法

       通过MapperSacnnerConfigurer进行mapper扫描（建议使用）

       mapper批量扫描，从mapper包中扫描出mapper接口，自动创建代理对象并且在spring容器中注册
       遵循规范：
            将XxxMapper.java接口和XxxMapper.xml映射文件名称保持一致，且在一个目录下
            自动扫描出来的XxxMapper的bean的id是XxxMapper类名（首写字母小写）
    -->
   <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
       <!--<property name="sqlSessionFactory" ref="sqlSessionFactory" />-->
       <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
       <!--
            指定扫描的包名
            如果扫描多个包，每个包中间使用英文都好分割
       -->
       <property name="basePackage" value="org.alpha.ssm.mapper" />
   </bean>

</beans>
