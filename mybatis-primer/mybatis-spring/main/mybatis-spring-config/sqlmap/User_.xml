<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--<mapper namespace="org.mybatis.book.chapter2.mapper.RoleMapper"> --> <!-- 命名空间不可少 -->
<!-- 可以使用typeAlias定义别名，简化resultType-->
<!--<select id="selectRole" parameterType="int" resultType="org.mybatis.book.chapter2.po.Role">-->
<!--select id, role_name as roleName, note from t_role where id = #{id}-->
<!--</select>-->
<!--</mapper>-->


<!--
    namespace命名空间，作用就是对sql进行分类化管理，理解为sql隔离
    注意：使用mapper代理方法开发，namespace有特殊的作用，

    关联Mapper.java接口和映射文件Mapper.xml
-->
<mapper namespace="org.alpha.ssm.dao">
    <!-- 在User.xml映射文件中配置很多sql语句-->
    <!-- 需求： 通过id查询用户表的记录 -->
    <!-- 通过select执行数据库查询
         id：表示映射文件中的sql语句，
             将sql语句封装到mappedStatement对象中，所以将id称为statement的id

         parameterType：指定输入参数的类型，这里指定int型

         #{}，表示一个占位符号
         #{id}，其中id表示接收输入的参数，参数名称是id，
                如果输入参数是简单类型，#{}中的参数名可以任意，可以是value或者其它
     -->

    <!-- 可以使用typeAlias定义别名，简化resultType-->
    <select id="findUserById" parameterType="int" resultType="org.alpha.ssm.po.User">
        <!--select id, role_name as roleName, note from t_role where id = #{id}-->
        select * from user where id = #{id}
    </select>

</mapper>

